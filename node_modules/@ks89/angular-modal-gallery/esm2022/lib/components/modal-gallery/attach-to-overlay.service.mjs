import { Injectable, Injector } from '@angular/core';
import { ModalGalleryRef } from './modal-gallery-ref';
import { ModalGalleryComponent } from './modal-gallery.component';
import { DIALOG_DATA } from './modal-gallery.tokens';
import { ComponentPortal } from '@angular/cdk/portal';
import * as i0 from "@angular/core";
import * as i1 from "./modal-gallery.service";
class AttachToOverlayService {
    constructor(injector, modalGalleryService) {
        this.injector = injector;
        this.modalGalleryService = modalGalleryService;
    }
    /**
     * To be called by a provider with the APP_INITIALIZER token.
     */
    initialize() {
        this.modalGalleryService.triggerAttachToOverlay.subscribe(payload => this.attachToOverlay(payload));
    }
    /**
     * Private method to attach ModalGalleryComponent to the overlay.
     * @param payload {@link AttachToOverlayPayload} with all necessary information
     * @private
     */
    attachToOverlay(payload) {
        const injector = Injector.create({
            parent: this.injector,
            providers: [
                { provide: ModalGalleryRef, useValue: payload.dialogRef },
                { provide: DIALOG_DATA, useValue: payload.config }
            ]
        });
        const containerPortal = new ComponentPortal(ModalGalleryComponent, null, injector);
        payload.overlayRef.attach(containerPortal);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: AttachToOverlayService, deps: [{ token: i0.Injector }, { token: i1.ModalGalleryService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: AttachToOverlayService, providedIn: 'root' }); }
}
export { AttachToOverlayService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: AttachToOverlayService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.ModalGalleryService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLXRvLW92ZXJsYXkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tzODkvYW5ndWxhci1tb2RhbC1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy9tb2RhbC1nYWxsZXJ5L2F0dGFjaC10by1vdmVybGF5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUd0RCxNQUNhLHNCQUFzQjtJQUNqQyxZQUFvQixRQUFrQixFQUFVLG1CQUF3QztRQUFwRSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUFHLENBQUM7SUFFNUY7O09BRUc7SUFDSSxVQUFVO1FBQ2YsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGVBQWUsQ0FBQyxPQUErQjtRQUNyRCxNQUFNLFFBQVEsR0FBYSxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ3pDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNyQixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUN6RCxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUU7YUFDbkQ7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkYsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs4R0ExQlUsc0JBQXNCO2tIQUF0QixzQkFBc0IsY0FEVCxNQUFNOztTQUNuQixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kYWxHYWxsZXJ5UmVmIH0gZnJvbSAnLi9tb2RhbC1nYWxsZXJ5LXJlZic7XG5pbXBvcnQgeyBNb2RhbEdhbGxlcnlDb21wb25lbnQgfSBmcm9tICcuL21vZGFsLWdhbGxlcnkuY29tcG9uZW50JztcbmltcG9ydCB7IERJQUxPR19EQVRBIH0gZnJvbSAnLi9tb2RhbC1nYWxsZXJ5LnRva2Vucyc7XG5pbXBvcnQgeyBDb21wb25lbnRQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IEF0dGFjaFRvT3ZlcmxheVBheWxvYWQsIE1vZGFsR2FsbGVyeVNlcnZpY2UgfSBmcm9tICcuL21vZGFsLWdhbGxlcnkuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQXR0YWNoVG9PdmVybGF5U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIG1vZGFsR2FsbGVyeVNlcnZpY2U6IE1vZGFsR2FsbGVyeVNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIFRvIGJlIGNhbGxlZCBieSBhIHByb3ZpZGVyIHdpdGggdGhlIEFQUF9JTklUSUFMSVpFUiB0b2tlbi5cbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIHRoaXMubW9kYWxHYWxsZXJ5U2VydmljZS50cmlnZ2VyQXR0YWNoVG9PdmVybGF5LnN1YnNjcmliZShwYXlsb2FkID0+IHRoaXMuYXR0YWNoVG9PdmVybGF5KHBheWxvYWQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcml2YXRlIG1ldGhvZCB0byBhdHRhY2ggTW9kYWxHYWxsZXJ5Q29tcG9uZW50IHRvIHRoZSBvdmVybGF5LlxuICAgKiBAcGFyYW0gcGF5bG9hZCB7QGxpbmsgQXR0YWNoVG9PdmVybGF5UGF5bG9hZH0gd2l0aCBhbGwgbmVjZXNzYXJ5IGluZm9ybWF0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIGF0dGFjaFRvT3ZlcmxheShwYXlsb2FkOiBBdHRhY2hUb092ZXJsYXlQYXlsb2FkKTogdm9pZCB7XG4gICAgY29uc3QgaW5qZWN0b3I6IEluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgIHBhcmVudDogdGhpcy5pbmplY3RvcixcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IE1vZGFsR2FsbGVyeVJlZiwgdXNlVmFsdWU6IHBheWxvYWQuZGlhbG9nUmVmIH0sXG4gICAgICAgIHsgcHJvdmlkZTogRElBTE9HX0RBVEEsIHVzZVZhbHVlOiBwYXlsb2FkLmNvbmZpZyB9XG4gICAgICBdXG4gICAgfSk7XG5cbiAgICBjb25zdCBjb250YWluZXJQb3J0YWwgPSBuZXcgQ29tcG9uZW50UG9ydGFsKE1vZGFsR2FsbGVyeUNvbXBvbmVudCwgbnVsbCwgaW5qZWN0b3IpO1xuICAgIHBheWxvYWQub3ZlcmxheVJlZi5hdHRhY2goY29udGFpbmVyUG9ydGFsKTtcbiAgfVxufVxuIl19