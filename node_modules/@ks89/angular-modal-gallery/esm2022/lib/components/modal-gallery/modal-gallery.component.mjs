import { ChangeDetectionStrategy, Component, HostListener, Inject, PLATFORM_ID, SecurityContext, ViewChild } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { DIALOG_DATA } from './modal-gallery.tokens';
import { ImageModalEvent } from '../../model/image.class';
import { ButtonType } from '../../model/buttons-config.interface';
import { Action } from '../../model/action.enum';
import { CurrentImageComponent } from '../current-image/current-image.component';
import { KS_DEFAULT_ACCESSIBILITY_CONFIG } from '../accessibility-default';
import * as i0 from "@angular/core";
import * as i1 from "./modal-gallery.service";
import * as i2 from "../../services/id-validator.service";
import * as i3 from "../../services/config.service";
import * as i4 from "@angular/platform-browser";
import * as i5 from "../upper-buttons/upper-buttons.component";
import * as i6 from "../dots/dots.component";
import * as i7 from "../previews/previews.component";
import * as i8 from "../current-image/current-image.component";
import * as i9 from "../../directives/click-outside.directive";
class ModalGalleryComponent {
    /**
     * HostListener to catch browser's back button and destroy the gallery.
     * This prevents weired behaviour about scrolling.
     * Added to fix this issue: https://github.com/Ks89/angular-modal-gallery/issues/159
     */
    onPopState() {
        this.closeGallery();
    }
    /**
     * HostListener to catch ctrl+s/meta+s and download the current image.
     * Inspired by https://netbasal.com/add-keyboard-shortcuts-to-your-angular-app-9bf2e89862b3
     */
    onSaveListener(event) {
        event.preventDefault();
        this.downloadImage();
    }
    constructor(dialogContent, modalGalleryService, 
    // tslint:disable-next-line:ban-types
    platformId, changeDetectorRef, idValidatorService, configService, sanitizer) {
        this.dialogContent = dialogContent;
        this.modalGalleryService = modalGalleryService;
        this.platformId = platformId;
        this.changeDetectorRef = changeDetectorRef;
        this.idValidatorService = idValidatorService;
        this.configService = configService;
        this.sanitizer = sanitizer;
        /**
         * Boolean to enable modal-gallery close behaviour when clicking
         * on the semi-transparent background. Enabled by default.
         */
        this.enableCloseOutside = true;
        /**
         * Object of type `AccessibilityConfig` to init custom accessibility features.
         * For instance, it contains titles, alt texts, aria-labels and so on.
         */
        this.accessibilityConfig = KS_DEFAULT_ACCESSIBILITY_CONFIG;
        /**
         * Boolean to open the modal gallery. False by default.
         */
        this.showGallery = false;
        this.id = this.dialogContent.id;
        this.images = this.dialogContent.images;
        this.currentImage = this.dialogContent.currentImage;
        this.libConfig = this.dialogContent.libConfig;
        this.customPreviewsTemplate = this.dialogContent.previewsTemplate;
        this.configService.setConfig(this.id, this.libConfig);
        this.updateImagesSubscription = this.modalGalleryService.updateImages$.subscribe((images) => {
            this.images = images.map((image) => {
                const newImage = Object.assign({}, image, { previouslyLoaded: false });
                return newImage;
            });
            this.initImages();
            this.images.forEach((image) => {
                if (image.id === this.currentImage.id) {
                    this.currentImage = image;
                }
            });
            this.changeDetectorRef.markForCheck();
        });
    }
    /**
     * Method ´ngOnInit´ to init images calling `initImages()`.
     * This is an angular lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit() {
        this.idValidatorService.checkAndAdd(this.id);
        // id is a mandatory input and must a number > 0
        if ((!this.id && this.id !== 0) || this.id < 0) {
            throw new Error(`'[id]="a number >= 0"' is a mandatory input in angular-modal-gallery.` +
                `If you are using multiple instances of this library, please be sure to use different ids`);
        }
        const libConfig = this.configService.getConfig(this.id);
        if (!libConfig || !libConfig.dotsConfig) {
            throw new Error('Internal library error - libConfig and dotsConfig must be defined');
        }
        this.dotsConfig = libConfig.dotsConfig;
        setTimeout(() => {
            this.initImages();
        }, 0);
    }
    /**
     * Method called by custom upper buttons.
     * @param event ButtonEvent event payload
     */
    onCustomEmit(event) {
        const eventToEmit = this.getButtonEventToEmit(event);
        this.modalGalleryService.emitButtonBeforeHook(eventToEmit);
        this.modalGalleryService.emitButtonAfterHook(eventToEmit);
    }
    /**
     * Method called by the full-screen upper button.
     * @param event ButtonEvent event payload
     */
    onFullScreen(event) {
        const eventToEmit = this.getButtonEventToEmit(event);
        this.modalGalleryService.emitButtonBeforeHook(eventToEmit);
        // tslint:disable-next-line:no-any
        const doc = document;
        // tslint:disable-next-line:no-any
        const docEl = document.documentElement;
        const fullscreenDisabled = !doc.fullscreenElement && !doc.webkitFullscreenElement;
        // In Safari `requestFullscreen` and `exitFullscreen` are undefined. Safari requires the prefixed version `webkit-`
        // and it doesn't return promises.
        // I cannot call `emitButtonAfterHook` only if requestFullScreen is successful, because there are no guarantees across browsers and
        // I should also handle the case with keyboard "esc" button.
        if (fullscreenDisabled) {
            if (docEl.requestFullscreen) {
                docEl.requestFullscreen()
                    .then(() => {
                })
                    .catch(() => {
                    console.error('Cannot request full screen');
                });
            }
            else if (docEl.webkitRequestFullscreen) {
                // For Safari and it doesn't return a promise
                docEl.webkitRequestFullscreen();
            }
        }
        else {
            if (doc.exitFullscreen) {
                doc.exitFullscreen()
                    .then(() => {
                })
                    .catch(() => {
                    console.error('Cannot request exit full screen');
                });
            }
            else if (doc.webkitExitFullscreen) {
                // For Safari and it doesn't return a promise
                doc.webkitExitFullscreen();
            }
        }
        this.modalGalleryService.emitButtonAfterHook(eventToEmit);
    }
    /**
     * Method called by the delete upper button.
     * @param event ButtonEvent event payload
     */
    onDelete(event) {
        const eventToEmit = this.getButtonEventToEmit(event);
        this.modalGalleryService.emitButtonBeforeHook(eventToEmit);
        if (this.images.length === 1) {
            this.closeGallery();
        }
        if (!this.currentImageComponent) {
            throw new Error('currentImageComponent must be defined');
        }
        const imageIndexToDelete = this.currentImageComponent.getIndexToDelete(event.image);
        if (imageIndexToDelete === this.images.length - 1) {
            // last image
            this.currentImageComponent.prevImage();
        }
        else {
            this.currentImageComponent.nextImage();
        }
        this.modalGalleryService.emitButtonAfterHook(eventToEmit);
    }
    /**
     * Method called by the navigate upper button.
     * @param event ButtonEvent event payload
     */
    onNavigate(event) {
        const eventToEmit = this.getButtonEventToEmit(event);
        this.modalGalleryService.emitButtonBeforeHook(eventToEmit);
        // To support SSR
        if (isPlatformBrowser(this.platformId)) {
            if (eventToEmit.image && eventToEmit.image.modal.extUrl) {
                // where I should open this link? The current tab or another one?
                if (eventToEmit.button && eventToEmit.button.extUrlInNewTab) {
                    // in this case I should use target _blank to open the url in a new tab, however these is a security issue.
                    // Prevent Reverse Tabnabbing's attacks (https://www.owasp.org/index.php/Reverse_Tabnabbing)
                    // Some resources:
                    // - https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Tabnabbing
                    // - https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
                    // - https://developer.mozilla.org/en-US/docs/Web/API/Window/open
                    const newWindow = window.open(eventToEmit.image.modal.extUrl, 'noopener,noreferrer,');
                    // it returns null if the call failed, so I have to do this check
                    if (newWindow) {
                        newWindow.opener = null; // required to prevent security issues
                        // emit only in case of success
                        this.modalGalleryService.emitButtonAfterHook(eventToEmit);
                    }
                }
                else {
                    this.updateLocationHref(eventToEmit.image.modal.extUrl);
                    // emit only in case of success
                    this.modalGalleryService.emitButtonAfterHook(eventToEmit);
                }
            }
        }
    }
    /**
     * This method is defined to be spied and replaced in unit testing with a fake method call.
     * It must be public to be able to use jasmine spyOn method.
     * @param newHref string new url
     */
    updateLocationHref(newHref) {
        window.location.href = newHref;
    }
    /**
     * Method called by the download upper button.
     * @param event ButtonEvent event payload
     */
    onDownload(event) {
        const eventToEmit = this.getButtonEventToEmit(event);
        this.modalGalleryService.emitButtonBeforeHook(eventToEmit);
        this.downloadImage();
        this.modalGalleryService.emitButtonAfterHook(eventToEmit);
    }
    /**
     * Method called by the close upper button.
     * @param event ButtonEvent event payload
     * @param action Action that triggered the close method. `Action.NORMAL` by default
     */
    onCloseGalleryButton(event, action = Action.NORMAL) {
        const eventToEmit = this.getButtonEventToEmit(event);
        this.modalGalleryService.emitButtonBeforeHook(eventToEmit);
        this.closeGallery(action, false);
    }
    /**
     * Method called by CurrentImageComponent.
     * @param event ImageModalEvent event payload
     * @param action Action that triggered the close method. `Action.NORMAL` by default
     */
    onCloseGallery(event, action = Action.NORMAL) {
        // remap ImageModalEvent to ButtonEvent
        const buttonEvent = {
            button: {
                type: ButtonType.CLOSE
            },
            image: null,
            action: event.action,
            galleryId: event.galleryId
        };
        this.modalGalleryService.emitButtonBeforeHook(buttonEvent);
        this.closeGallery(action, false);
    }
    /**
     * Method to close the modal gallery specifying the action.
     * @param action Action action type. `Action.NORMAL` by default
     * @param clickOutside boolean that is true if called clicking on the modal background. False by default.
     */
    closeGallery(action = Action.NORMAL, clickOutside = false) {
        const libConfig = this.configService.getConfig(this.id);
        if (!libConfig) {
            throw new Error('Internal library error - libConfig must be defined');
        }
        this.modalGalleryService.emitClose(new ImageModalEvent(this.id, action, true));
        this.modalGalleryService.close(this.id, clickOutside);
    }
    /**
     * Method called when the image changes and used to update the `currentImage` object.
     * @param event ImageModalEvent event payload
     */
    onChangeCurrentImage(event) {
        const newIndex = event.result;
        if (newIndex < 0 || newIndex >= this.images.length) {
            return;
        }
        this.currentImage = this.images[newIndex];
        // emit current visible image index
        this.modalGalleryService.emitShow(new ImageModalEvent(this.id, event.action, newIndex + 1));
        // emit first/last event based on newIndex value
        this.emitBoundaryEvent(event.action, newIndex);
    }
    /**
     * Method called when you click 'outside' (i.e. on the semi-transparent background)
     * to close the modal gallery if `enableCloseOutside` is true.
     * @param event boolean that is true to close the modal gallery, false otherwise
     */
    onClickOutside(event) {
        if (event && this.enableCloseOutside) {
            this.closeGallery(Action.CLICK, true);
        }
    }
    /**
     * Method called when an image is loaded and the loading spinner has gone.
     * It sets the previouslyLoaded flag inside the Image to hide loading spinner when displayed again.
     * @param event ImageLoadEvent event payload
     */
    onImageLoad(event) {
        // sets as previously loaded the image with index specified by `event.status`
        this.images = this.images.map((img) => {
            if (img && img.id === event.id) {
                return Object.assign({}, img, { previouslyLoaded: event.status });
            }
            return img;
        });
    }
    /**
     * Method called when a dot is clicked and used to update the current image.
     * @param index number index of the clicked dot
     */
    onClickDot(index) {
        this.currentImage = this.images[index];
    }
    /**
     * Method called when an image preview is clicked and used to update the current image.
     * @param event ImageModalEvent preview image
     */
    onClickPreview(event) {
        this.onChangeCurrentImage(event);
    }
    /**
     * Method to cleanup resources.
     * This is an angular lifecycle hook that is called when this component is destroyed.
     */
    ngOnDestroy() {
        if (this.updateImagesSubscription) {
            this.updateImagesSubscription.unsubscribe();
        }
        this.idValidatorService.remove(this.id);
    }
    /**
     * Method to download the current image, only if `downloadable` is true.
     * @private
     */
    downloadImage() {
        if (this.id === null || this.id === undefined) {
            throw new Error('Internal library error - id must be defined');
        }
        const libConfig = this.configService.getConfig(this.id);
        if (!libConfig) {
            throw new Error('Internal library error - libConfig must be defined');
        }
        const currentImageConfig = libConfig.currentImageConfig;
        if (currentImageConfig && !currentImageConfig.downloadable) {
            return;
        }
        this.downloadImageAllBrowsers();
    }
    /**
     * Method to convert a base64 to a Blob
     * @param base64Data string with base64 data
     * @param contentType string with the MIME type
     * @return Blob converted from the input base64Data
     * @private
     */
    base64toBlob(base64Data, contentType = '') {
        const sliceSize = 1024;
        const byteCharacters = atob(base64Data);
        const bytesLength = byteCharacters.length;
        const slicesCount = Math.ceil(bytesLength / sliceSize);
        const byteArrays = new Array(slicesCount);
        for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {
            const begin = sliceIndex * sliceSize;
            const end = Math.min(begin + sliceSize, bytesLength);
            const bytes = new Array(end - begin);
            for (let offset = begin, i = 0; offset < end; ++i, ++offset) {
                bytes[i] = byteCharacters[offset].charCodeAt(0);
            }
            byteArrays[sliceIndex] = new Uint8Array(bytes);
        }
        return new Blob(byteArrays, { type: contentType });
    }
    /**
     * Private method to download the current image for all browsers.
     * @private
     */
    downloadImageAllBrowsers() {
        const link = document.createElement('a');
        let isBase64 = false;
        let img;
        // convert a SafeResourceUrl to a string
        if (typeof this.currentImage.modal.img === 'string') {
            img = this.currentImage.modal.img;
        }
        else {
            // if it's a SafeResourceUrl
            img = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, this.currentImage.modal.img);
        }
        if (img.includes('data:image/') || img.includes(';base64,')) {
            const extension = img.replace('data:image/', '').split(';base64,')[0];
            const pureBase64 = img.split(';base64,')[1];
            const blob = this.base64toBlob(pureBase64, 'image/' + extension);
            link.href = URL.createObjectURL(blob);
            isBase64 = true;
            link.setAttribute('download', this.getFileName(this.currentImage, isBase64, extension));
        }
        else {
            link.href = img;
            link.setAttribute('download', this.getFileName(this.currentImage, isBase64));
        }
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    /**
     * Private method to get the `ButtonEvent` to emit, merging the input `ButtonEvent`
     * with the current image.
     * @param event ButtonEvent event payload to return
     * @returns ButtonEvent event payload with the current image included
     * @private
     */
    getButtonEventToEmit(event) {
        return Object.assign(event, { image: this.currentImage });
    }
    /**
     * Private method to get the file name from an input path.
     * This is used either to get the image's name from its path or from the Image itself,
     * if specified as 'downloadFileName' by the user.
     * @param image Image image to extract its file name
     * @param isBase64 boolean to set if the image is a base64 file or not. False by default.
     * @param base64Extension string to force the extension of the base64 image. Empty string by default.
     * @returns string string file name of the input image.
     * @private
     */
    getFileName(image, isBase64 = false, base64Extension = '') {
        if (!image.modal.downloadFileName || image.modal.downloadFileName.length === 0) {
            if (isBase64) {
                return `Image-${image.id}.${base64Extension !== '' ? base64Extension : 'png'}`;
            }
            else {
                return image.modal.img.replace(/^.*[\\\/]/, '');
            }
        }
        else {
            return image.modal.downloadFileName;
        }
    }
    /**
     * Private method to initialize `images` as array of `Image`s.
     * Also, it will emit ImageModalEvent to say that images are loaded.
     * @private
     */
    initImages() {
        this.modalGalleryService.emitHasData(new ImageModalEvent(this.id, Action.LOAD, true));
        const currentIndex = this.images.indexOf(this.currentImage);
        // emit a new ImageModalEvent with the index of the current image
        this.modalGalleryService.emitShow(new ImageModalEvent(this.id, Action.LOAD, currentIndex + 1));
        // emit first/last event based on newIndex value
        this.emitBoundaryEvent(Action.NORMAL, currentIndex);
        this.showGallery = this.images.length > 0;
    }
    /**
     * Private method to emit events when either the last or the first image are visible.
     * @param action Action Enum of type Action that represents the source of the event that changed the
     *  current image to the first one or the last one.
     * @param indexToCheck number is the index number of the image (the first or the last one).
     * @private
     */
    emitBoundaryEvent(action, indexToCheck) {
        // to emit first/last event
        switch (indexToCheck) {
            case 0:
                this.modalGalleryService.emitFirstImage(new ImageModalEvent(this.id, action, true));
                break;
            case this.images.length - 1:
                this.modalGalleryService.emitLastImage(new ImageModalEvent(this.id, action, true));
                break;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ModalGalleryComponent, deps: [{ token: DIALOG_DATA }, { token: i1.ModalGalleryService }, { token: PLATFORM_ID }, { token: i0.ChangeDetectorRef }, { token: i2.IdValidatorService }, { token: i3.ConfigService }, { token: i4.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: ModalGalleryComponent, selector: "ks-modal-gallery", host: { listeners: { "window:popstate": "onPopState()", "document:keydown.code.control.keyS": "onSaveListener($event)", "document:keydown.code.meta.keyS": "onSaveListener($event)" } }, viewQueries: [{ propertyName: "currentImageComponent", first: true, predicate: CurrentImageComponent, descendants: true, static: true }], ngImport: i0, template: "<div id=\"modal-gallery-wrapper\"\n     [attr.aria-label]=\"accessibilityConfig.modalGalleryContentAriaLabel\"\n     [title]=\"accessibilityConfig.modalGalleryContentTitle\"\n     ksClickOutside [clickOutsideEnable]=\"enableCloseOutside\"\n     (clickOutside)=\"onClickOutside($event)\">\n\n  <div id=\"flex-min-height-ie-fix\">\n    <div id=\"modal-gallery-container\">\n\n      <ks-upper-buttons [id]=\"id\"\n                        [currentImage]=\"currentImage\"\n                        (delete)=\"onDelete($event)\"\n                        (navigate)=\"onNavigate($event)\"\n                        (download)=\"onDownload($event)\"\n                        (closeButton)=\"onCloseGalleryButton($event)\"\n                        (fullscreen)=\"onFullScreen($event)\"\n                        (customEmit)=\"onCustomEmit($event)\"></ks-upper-buttons>\n\n      <ks-current-image [id]=\"id\"\n                        [images]=\"images\"\n                        [currentImage]=\"currentImage\"\n                        [isOpen]=\"true\"\n                        (loadImage)=\"onImageLoad($event)\"\n                        (changeImage)=\"onChangeCurrentImage($event)\"\n                        (closeGallery)=\"onCloseGallery($event)\"></ks-current-image>\n\n      <div>\n        <ks-dots [id]=\"id\"\n                 [images]=\"images\"\n                 [currentImage]=\"currentImage\"\n                 [dotsConfig]=\"dotsConfig\"\n                 (clickDot)=\"onClickDot($event)\"></ks-dots>\n\n        <ks-previews [id]=\"id\"\n                     [images]=\"images\"\n                     [currentImage]=\"currentImage\"\n                     [customTemplate]=\"customPreviewsTemplate\"\n                     (clickPreview)=\"onClickPreview($event)\"></ks-previews>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["#flex-min-height-ie-fix{display:flex;flex-direction:column;justify-content:center}#modal-gallery-container{display:flex;flex-direction:column;justify-content:space-between;min-width:100vw;min-height:100vh}\n"], dependencies: [{ kind: "component", type: i5.UpperButtonsComponent, selector: "ks-upper-buttons", inputs: ["id", "currentImage"], outputs: ["refresh", "delete", "navigate", "download", "closeButton", "fullscreen", "customEmit"] }, { kind: "component", type: i6.DotsComponent, selector: "ks-dots", inputs: ["id", "currentImage", "images", "dotsConfig"], outputs: ["clickDot"] }, { kind: "component", type: i7.PreviewsComponent, selector: "ks-previews", inputs: ["id", "currentImage", "images", "customTemplate"], outputs: ["clickPreview"] }, { kind: "component", type: i8.CurrentImageComponent, selector: "ks-current-image", inputs: ["id", "currentImage", "images", "isOpen"], outputs: ["loadImage", "changeImage", "closeGallery"] }, { kind: "directive", type: i9.ClickOutsideDirective, selector: "[ksClickOutside]", inputs: ["clickOutsideEnable"], outputs: ["clickOutside"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { ModalGalleryComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ModalGalleryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ks-modal-gallery', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div id=\"modal-gallery-wrapper\"\n     [attr.aria-label]=\"accessibilityConfig.modalGalleryContentAriaLabel\"\n     [title]=\"accessibilityConfig.modalGalleryContentTitle\"\n     ksClickOutside [clickOutsideEnable]=\"enableCloseOutside\"\n     (clickOutside)=\"onClickOutside($event)\">\n\n  <div id=\"flex-min-height-ie-fix\">\n    <div id=\"modal-gallery-container\">\n\n      <ks-upper-buttons [id]=\"id\"\n                        [currentImage]=\"currentImage\"\n                        (delete)=\"onDelete($event)\"\n                        (navigate)=\"onNavigate($event)\"\n                        (download)=\"onDownload($event)\"\n                        (closeButton)=\"onCloseGalleryButton($event)\"\n                        (fullscreen)=\"onFullScreen($event)\"\n                        (customEmit)=\"onCustomEmit($event)\"></ks-upper-buttons>\n\n      <ks-current-image [id]=\"id\"\n                        [images]=\"images\"\n                        [currentImage]=\"currentImage\"\n                        [isOpen]=\"true\"\n                        (loadImage)=\"onImageLoad($event)\"\n                        (changeImage)=\"onChangeCurrentImage($event)\"\n                        (closeGallery)=\"onCloseGallery($event)\"></ks-current-image>\n\n      <div>\n        <ks-dots [id]=\"id\"\n                 [images]=\"images\"\n                 [currentImage]=\"currentImage\"\n                 [dotsConfig]=\"dotsConfig\"\n                 (clickDot)=\"onClickDot($event)\"></ks-dots>\n\n        <ks-previews [id]=\"id\"\n                     [images]=\"images\"\n                     [currentImage]=\"currentImage\"\n                     [customTemplate]=\"customPreviewsTemplate\"\n                     (clickPreview)=\"onClickPreview($event)\"></ks-previews>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["#flex-min-height-ie-fix{display:flex;flex-direction:column;justify-content:center}#modal-gallery-container{display:flex;flex-direction:column;justify-content:space-between;min-width:100vw;min-height:100vh}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DIALOG_DATA]
                }] }, { type: i1.ModalGalleryService }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.ChangeDetectorRef }, { type: i2.IdValidatorService }, { type: i3.ConfigService }, { type: i4.DomSanitizer }]; }, propDecorators: { currentImageComponent: [{
                type: ViewChild,
                args: [CurrentImageComponent, { static: true }]
            }], onPopState: [{
                type: HostListener,
                args: ['window:popstate']
            }], onSaveListener: [{
                type: HostListener,
                args: ['document:keydown.code.control.keyS', ['$event']]
            }, {
                type: HostListener,
                args: ['document:keydown.code.meta.keyS', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,